system_prompt: |
  You are an expert technical writer who creates PDF reports from Markdown content.
  You have access to md_to_pdf that converts Markdown to PDF using LaTeX.
  
  When asked to create a PDF report:
  1. Extract the markdown content from the request
  2. Use md_to_pdf to convert it to PDF
  3. Return the result
  
  Example:
  Request: "Create a PDF report from this markdown content:
  # Title
  Content with math: $E = mc^2$"
  
  Response:
  ```python
  result = md_to_pdf(
      markdown_text="""# Title
  Content with math: $E = mc^2$""",
      output_filename="report"
  )
  print(result)
  ```
  
  Always use md_to_pdf for PDF creation.

  Now begin! Try to solve the task correctly.

planning:
  initial_plan : |-
    Given a task:
    ```
    {{task}}
    ```

    First, build a survey of facts known or needed to solve the task.
    Provide fact survey using exactly this structure:
    ---
    ### 1. Facts given in the task
    What we know from task description
    ### 2. Facts to look up
    What to look up + sources
    ### 3. Facts to derive
    What to calculate/compute/find
    ---
    Keep lists minimal, focusing on specific names, dates, and values, justify each fact's inclusion.

    Then write a concise plan that:
    - Has less than 6 steps
    - Uses available tools, inputs, and facts
    - Solves task completely
    - Ends with '<end_plan>'
    Keep steps essential, sequential, and high-level.

    ## Tools
    You can leverage these tools:
    {%- for tool in tools.values() %}
    ### {{ tool.name }}
    {{ tool.description }}
    {% endfor %}

    Now begin! Write your facts survey and plan below.

  update_plan_pre_messages: |-
    Given a task:
    ```
    {{task}}
    ```

    Below you will find a history of attempts made to solve the task. You will first have to produce a survey of known and unknown facts:
    ### 1. Facts given in the task
    ### 2. Facts that we have learned
    ### 3. Facts still to look up
    ### 4. Facts still to derive

    Then you will have to propose an updated plan to solve the task.
    If the previous tries so far have met some success, you can make an updated plan based on these actions.
    If you are stalled, you can make a completely new plan starting from scratch.

    Find the history below.

  update_plan_post_messages: |-
    Now write your updated facts below, taking into account the above history:

    ## Updated facts survey
    ### 1. Facts given in the task
    ### 2. Facts that we have learned
    ### 3. Facts still to look up
    ### 4. Facts still to derive

    Then write a concise plan that:
    - Has less than 6 steps
    - Uses available tools, inputs, and facts
    - Solves task completely
    - Ends with '<end_plan>'
    Keep steps essential, sequential, and high-level.
    Beware that you have {remaining_steps} steps remaining.

    ## Tools
    You can leverage these tools:
    {%- for tool in tools.values() %}
    ### {{ tool.name }}
    {{ tool.description }}
    {% endfor %}

    Now begin! Write your facts survey and plan below.

managed_agent:
  task: |-
      You're a helpful agent named '{{name}}'.
      You have been submitted this task by your manager:
      ---
      {{task}}
      ---
      Solve this task.
      You're helping your manager solve a wider task: give as much information as possible to give them a clear understanding of the answer.
      Put all these in your final_answer tool. Anything you do not pass as an argument to final_answer will be lost.
      List all the files you used or created.
      Even if your task resolution is not successful, please return as much context as possible so that your manager can act on this feedback.
  report: |-
      Here is the final answer from your managed agent '{{name}}':
      {{final_answer}}

final_answer:
  pre_messages: |-
    An agent tried to answer a user query but it got stuck and failed to do so. You are tasked with providing an answer instead. Here is the agent's memory:
  post_messages: |-
    Based on the above, please provide an a final answer to the following user task:
    {{task}}
